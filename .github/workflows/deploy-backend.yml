name: Deploy backend to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'backend-api/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep target dir (preserve .env)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -e
            mkdir -p "${{ secrets.EC2_PATH }}/backend-api"
            # Preserve existing .env if present
            if [ -f "${{ secrets.EC2_PATH }}/backend-api/.env" ]; then
              cp "${{ secrets.EC2_PATH }}/backend-api/.env" "/tmp/backend-api.env.$$"
            fi
            # Clean directory contents but keep directory and later restore .env
            find "${{ secrets.EC2_PATH }}/backend-api" -mindepth 1 -maxdepth 1 ! -name '.env' -exec rm -rf {} +
            # Restore .env
            if [ -f "/tmp/backend-api.env.$$" ]; then
              mv "/tmp/backend-api.env.$$" "${{ secrets.EC2_PATH }}/backend-api/.env"
            fi

      - name: Upload backend files (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "backend-api/*"
          target: "${{ secrets.EC2_PATH }}/backend-api"
          strip_components: 1

      - name: Deploy via SSH (PM2 reload)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          debug: true
          script: |
            set -e
            cd "${{ secrets.EC2_PATH }}/backend-api"

            # Install PM2 if not installed
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm install -g pm2
            fi

            # Install dependencies
            npm ci || npm install

            # Start or reload the app using PM2
            pm2 startOrReload ecosystem.config.cjs --env production || pm2 start ecosystem.config.cjs --env production

            # Save PM2 process list
            pm2 save
